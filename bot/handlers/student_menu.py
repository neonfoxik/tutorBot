from datetime import datetime
from django.conf import settings
from telebot.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup

from bot import bot
from bot.models import StudentProfile, User, Lesson, ComplexHomework


def education(message: Message):
    """–§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—É /education"""
    # –ü–æ–ª—É—á–∞–µ–º id –∏ User
    user_id = message.chat.id
    user = User.objects.get(telegram_id=user_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    student_profiles = user.student_profiles

    is_some = True if student_profiles.count() > 1 else False

    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π > 1, –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å
    if is_some:
        markup = InlineKeyboardMarkup()
        for student_profile in student_profiles:
            markup.add(InlineKeyboardButton(text=f"{student_profile.profile_name} | {student_profile.class_number}", callback_data=f"education_{student_profile_id}"))

        bot.send_message(
            chat_id=user_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
            reply_markup=markup
        )
    
    else:
        education_show(student_profiles.first().id, message.id, message.chat.id)


def education_show(studentprofile_id, message_id, chat_id):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—á–µ–±–µ: –£—Ä–æ–∫–∏, –î–æ–º–∞—à–Ω–∏–µ –ó–∞–¥–∞–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞
    studentprofile = StudentProfile.objects.get(pk=studentprofile_id)

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton(text="–£—Ä–æ–∫–∏", callback_data=f"lessons_{studentprofile_id}"),
        InlineKeyboardButton(text="–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data=f"homeworks_{studentprofile_id}")     
    )
    
    bot.send_message(
        chat_id=chat_id,
        text=f"""
üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ

üë©‚Äçüéì –ò–º—è: {studentprofile.profile_name}
""",
        reply_markup=markup
    )


def education_studentprofiles_handler(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–∞ –≤ education()"""
    _, studentprofile_id = call.data.split("_")
    education_show(studentprofile_id, call.message.id, call.message.chat.id)


def education_show_handler(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤ education_show()"""
    type_ = call.data.split("_")
    studentprofile = StudentProfile.objects.get(pk=type_[1])
    lessons_markup = False
    homeworks_markup = False

    if type_[0] == "lessons":
        text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ä–æ–∫–æ–≤"
        if studentprofile.group is not None:
            lessons = studentprofile.group.lessons
            if lessons is not None:
                lessons_markup = InlineKeyboardMarkup()
                lessons_markup.add(
                    InlineKeyboardButton(text="–ü—Ä–æ—à–µ–¥—à–∏–µ —É—Ä–æ–∫–∏", callback_data=f"lessons-_past_{studentprofile.id}"),
                    InlineKeyboardButton(text="–ë—É–¥—É—â–∏–µ —É—Ä–æ–∫–∏", callback_data=f"lessons-_future_{studentprofile.id}")
                )
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
                

        bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.id,
                text=text,
                reply_markup=lessons_markup if lessons_markup else None
            )    

    else:
        homeworks = ComplexHomework.objects.filter(student=studentprofile, lesson__date__gte=datetime.now().date())
        text = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö —Ä–∞–±–æ—Ç"
        if homeworks.exists():
            homeworks_markup = InlineKeyboardMarkup()
            for homework in homeworks:
                homeworks_markup.add(InlineKeyboardButton(text=f"{homework}", url=f"{settings.HOOK if settings.HOOK[-1] == '/' else settings.HOOK+'/'}bot/tasks/{homework.id}/answer/{studentprofile.id}/"))
            text="–í–æ—Ç –≤–∞—à–∏ –∑–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"

        bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.id,
                text=text,
                reply_markup=homeworks_markup if homeworks_markup else None
            )    
        

def show_lessons(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —É—Ä–æ–∫–æ–≤ –≤ education_show_handler()"""
    _, time, studentprofile_id = call.data.split()
    studentprofile = StudentProfile.objects.get(pk=studentprofile_id)
    group = studentprofile
    text = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤"
    markup = False

    if time == "past":
        lessons = Lesson.objects.filter(date__lt=datetime.now().date(), group=group)
    else:
        lessons = Lesson.objects.filter(date__gte=datetime.now().date(), group=group)

    if lessons.exists():
        markup = InlineKeyboardMarkup()
        for lesson in lessons:
            markup.add(InlineKeyboardButton(text=f"{lesson}", callback_data=f"lesson_{lesson.id}"))
        text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.id,
        text=text,
        reply_markup = markup if markup else None
    )
