from telebot.types import CallbackQuery
from django.db import transaction
from bot import bot
import logging

logger = logging.getLogger('bot')
from bot.models import User, Payment, PaymentHistory
from bot.keyboards import (
    generate_payment_method_keyboard,
    generate_payment_months_keyboard,
    generate_balance_payment_months_keyboard,
    generate_check_payment_keyboard,
    generate_payment_menu_keyboard
)
from bot.pricing import get_price_by_class
from bot.yookassa_client import create_payment as create_yookassa_payment


def payment_method(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    try:
        user = User.objects.get(telegram_id=str(call.from_user.id))
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        active_profile = user.student_profiles.filter(is_active=True).first()
        if not active_profile:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        class_key = active_profile.class_number
        if active_profile.education_level:
            if active_profile.class_number in ['10', '11']:
                class_key = f"{active_profile.class_number}_{active_profile.education_level}"
        
        price_info = get_price_by_class(class_key)
        
        if not price_info:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞")
            return
            
        lesson_price = price_info['price']
        class_name = price_info['name']
        description = price_info['description']
        
        markup = generate_payment_method_keyboard()
        
        text = f"üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π\n\n"
        text += f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {active_profile.profile_name}\n"
        text += f"üìö –ö–ª–∞—Å—Å: {active_profile.class_number}\n"
        text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {active_profile.get_education_level_display() or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üí∞ –¢–∞—Ä–∏—Ñ: {class_name}\n"
        text += f"‚ÑπÔ∏è {description}\n"
        text += f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {lesson_price} ‚ÇΩ\n"
        text += f"üí≥ –ë–∞–ª–∞–Ω—Å: {active_profile.balance} ‚ÇΩ\n\n"
        text += f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        
        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                text=text,
                reply_markup=markup,
                message_id=call.message.message_id
            )
        except Exception as e:
            print(f"Error editing message: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


def payment_menu(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
    from bot.handlers.registration import start_registration
    
    telegram_id = str(call.from_user.id)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user = User.objects.get(telegram_id=telegram_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å
        if not user.student_profiles.exists():
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            start_registration(call.message)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        active_profile = user.student_profiles.filter(is_active=True).first()
        if not active_profile:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        class_key = active_profile.class_number
        if active_profile.education_level:
            if active_profile.class_number in ['10', '11']:
                class_key = f"{active_profile.class_number}_{active_profile.education_level}"
        
        price_info = get_price_by_class(class_key)
        
        if not price_info:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞")
            return
            
        lesson_price = price_info['price']
        class_name = price_info['name']
        description = price_info['description']
        
        markup = generate_payment_menu_keyboard()
        
        text = f"üí≥ –ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã\n\n"
        text += f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {active_profile.profile_name}\n"
        text += f"üìö –ö–ª–∞—Å—Å: {active_profile.class_number}\n"
        text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {active_profile.get_education_level_display() or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üí∞ –¢–∞—Ä–∏—Ñ: {class_name}\n"
        text += f"‚ÑπÔ∏è {description}\n"
        text += f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {lesson_price} ‚ÇΩ\n"
        text += f"üí≥ –ë–∞–ª–∞–Ω—Å: {active_profile.balance} ‚ÇΩ\n\n"
        text += f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                text=text,
                reply_markup=markup,
                message_id=call.message.message_id
            )
        except Exception as e:
            print(f"Error editing message: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        start_registration(call.message)


def start_payment(call: CallbackQuery) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    from bot.handlers.registration import start_registration
    
    telegram_id = str(call.from_user.id)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user = User.objects.get(telegram_id=telegram_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å
        if not user.student_profiles.exists():
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            start_registration(call.message)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        active_profile = user.student_profiles.filter(is_active=True).first()
        if not active_profile:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        class_key = active_profile.class_number
        if active_profile.education_level:
            if active_profile.class_number in ['10', '11']:
                class_key = f"{active_profile.class_number}_{active_profile.education_level}"
        
        price_info = get_price_by_class(class_key)
        
        if not price_info:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞")
            return
            
        lesson_price = price_info['price']
        class_name = price_info['name']
        description = price_info['description']
        
        markup = generate_payment_method_keyboard()
        
        text = f"üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π\n\n"
        text += f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {active_profile.profile_name}\n"
        text += f"üìö –ö–ª–∞—Å—Å: {active_profile.class_number}\n"
        text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {active_profile.get_education_level_display() or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üí∞ –¢–∞—Ä–∏—Ñ: {class_name}\n"
        text += f"‚ÑπÔ∏è {description}\n"
        text += f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {lesson_price} ‚ÇΩ\n"
        text += f"üí≥ –ë–∞–ª–∞–Ω—Å: {active_profile.balance} ‚ÇΩ\n\n"
        text += f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        start_registration(call.message)


def select_payment_method(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    try:
        user = User.objects.get(telegram_id=str(call.from_user.id))
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        active_profile = user.student_profiles.filter(is_active=True).first()
        if not active_profile:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        class_key = active_profile.class_number
        if active_profile.education_level:
            if active_profile.class_number in ['10', '11']:
                class_key = f"{active_profile.class_number}_{active_profile.education_level}"
        
        price_info = get_price_by_class(class_key)
        
        if not price_info:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞")
            return
            
        lesson_price = price_info['price']
        class_name = price_info['name']
        description = price_info['description']
        
        if call.data == "pay_with_yookassa":
            markup = generate_payment_months_keyboard()
            text = f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –æ–ø–ª–∞—Ç—ã\n\n"
            text += f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {active_profile.profile_name}\n"
            text += f"üìö –ö–ª–∞—Å—Å: {active_profile.class_number}\n"
            text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {active_profile.get_education_level_display() or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            text += f"üí∞ –¢–∞—Ä–∏—Ñ: {class_name}\n"
            text += f"‚ÑπÔ∏è {description}\n"
            text += f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {lesson_price} ‚ÇΩ"
        else:  # pay_with_balance
            if active_profile.balance <= 0:
                bot.answer_callback_query(call.id, "‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                return
            
            markup = generate_balance_payment_months_keyboard()
            text = f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞\n\n"
            text += f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {active_profile.profile_name}\n"
            text += f"üìö –ö–ª–∞—Å—Å: {active_profile.class_number}\n"
            text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {active_profile.get_education_level_display() or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            text += f"üí∞ –¢–∞—Ä–∏—Ñ: {class_name}\n"
            text += f"‚ÑπÔ∏è {description}\n"
            text += f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {lesson_price} ‚ÇΩ\n"
            text += f"üí≥ –ë–∞–ª–∞–Ω—Å: {active_profile.balance} ‚ÇΩ"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


def select_payment_month(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆKassa"""
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞. User ID: {call.from_user.id}")
    logger.info(f"Callback data: {call.data}")
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ YooKassa:")
    from django.conf import settings
    logger.info(f"YOOKASSA_TEST_MODE: {settings.YOOKASSA_TEST_MODE}")
    logger.info(f"YOOKASSA_SHOP_ID exists: {'YOOKASSA_SHOP_ID' in dir(settings)}")
    logger.info(f"YOOKASSA_SECRET_KEY exists: {'YOOKASSA_SECRET_KEY' in dir(settings)}")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥ –∏–∑ callback_data
        parts = call.data.split('_')
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        try:
            month = int(parts[2])
            year = int(parts[3])
        except (IndexError, ValueError):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
            return
            
        if not (1 <= month <= 12):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞")
            return
            
        user = User.objects.get(telegram_id=str(call.from_user.id))
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        active_profile = user.student_profiles.filter(is_active=True).first()
        if not active_profile:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø–ª–∞—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
        if PaymentHistory.is_month_paid(user, month, year, active_profile):
            bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ—Ç –º–µ—Å—è—Ü —É–∂–µ –æ–ø–ª–∞—á–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        class_key = active_profile.class_number
        if active_profile.education_level:
            if active_profile.class_number in ['10', '11']:
                class_key = f"{active_profile.class_number}_{active_profile.education_level}"
        
        price_info = get_price_by_class(class_key)
        
        if not price_info:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞")
            return
            
        lesson_price = price_info['price']
        class_name = price_info['name']
        description = price_info['description']
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
            metadata = {
                'user_id': user.telegram_id,
                'profile_id': active_profile.id,
                'month': month,
                'year': year
            }
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment_data = create_yookassa_payment(
                amount=lesson_price,
                description=f"–û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π –∑–∞ {month:02d}.{year}",
                metadata=metadata
            )
            
            print(f"Payment data from YooKassa: {payment_data}")
            
            if not payment_data:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ÆKassa")
                return
                
            if 'id' not in payment_data:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: –Ω–µ—Ç ID –ø–ª–∞—Ç–µ–∂–∞")
                return
                
            if 'confirmation' not in payment_data:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                return
                
            if 'confirmation_url' not in payment_data['confirmation']:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: –Ω–µ—Ç URL –¥–ª—è –æ–ø–ª–∞—Ç—ã")
                return
        except Exception as e:
            print(f"Error creating YooKassa payment: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
        payment = Payment.objects.create(
            user=user,
            student_profile=active_profile,
            yookassa_payment_id=payment_data['id'],
            amount=lesson_price,
            status='pending',
            description=f"–û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π –∑–∞ {month:02d}.{year}",
            payment_month=month,
            payment_year=year,
            pricing_plan=class_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
        confirmation_url = payment_data['confirmation']['confirmation_url']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ
        markup = generate_check_payment_keyboard(confirmation_url, payment_data['id'], month, year)
        
        text = f"üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π\n\n"
        text += f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {active_profile.profile_name}\n"
        text += f"üìö –ö–ª–∞—Å—Å: {active_profile.class_number}\n"
        text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {active_profile.get_education_level_display() or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üí∞ –¢–∞—Ä–∏—Ñ: {class_name}\n"
        text += f"‚ÑπÔ∏è {description}\n"
        text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {month:02d}.{year}\n"
        text += f"üíµ –°—É–º–º–∞: {lesson_price} ‚ÇΩ\n\n"
        text += f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ'"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    except ValueError as e:
        print(f"ValueError in select_payment_month: {str(e)}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    except Exception as e:
        import traceback
        error_info = traceback.format_exc()
        logger.error(f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ select_payment_month:\n{error_info}")
        logger.error(f"–î–∞–Ω–Ω—ã–µ callback: {call.data}")
        logger.error(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {call.from_user.id}")
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return


def select_balance_payment_month(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥ –∏–∑ callback_data
        month = int(call.data.split('_')[3])
        year = int(call.data.split('_')[4])
        
        user = User.objects.get(telegram_id=str(call.from_user.id))
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        active_profile = user.student_profiles.filter(is_active=True).first()
        if not active_profile:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø–ª–∞—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
        if PaymentHistory.is_month_paid(user, month, year, active_profile):
            bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ—Ç –º–µ—Å—è—Ü —É–∂–µ –æ–ø–ª–∞—á–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        class_key = active_profile.class_number
        if active_profile.education_level:
            if active_profile.class_number in ['10', '11']:
                class_key = f"{active_profile.class_number}_{active_profile.education_level}"
        
        price_info = get_price_by_class(class_key)
        
        if not price_info:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞")
            return
            
        lesson_price = price_info['price']
        class_name = price_info['name']
        description = price_info['description']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
        if active_profile.balance < lesson_price:
            bot.answer_callback_query(call.id, "‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            return
        
        with transaction.atomic():
            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
            active_profile.balance -= lesson_price
            active_profile.save()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
            PaymentHistory.objects.create(
                user=user,
                student_profile=active_profile,
                month=month,
                year=year,
                amount_paid=lesson_price,
                pricing_plan=class_name,
                payment_type='balance',
                status='completed'
            )
        
        text = f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
        text += f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {active_profile.profile_name}\n"
        text += f"üìö –ö–ª–∞—Å—Å: {active_profile.class_number}\n"
        text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {active_profile.get_education_level_display() or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üí∞ –¢–∞—Ä–∏—Ñ: {class_name}\n"
        text += f"‚ÑπÔ∏è {description}\n"
        text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {month:02d}.{year}\n"
        text += f"üíµ –°–ø–∏—Å–∞–Ω–æ: {lesson_price} ‚ÇΩ\n"
        text += f"üí≥ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {active_profile.balance} ‚ÇΩ"
        
        markup = generate_payment_menu_keyboard()
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ–ø–ª–∞—Ç–µ
        notify_admins_about_payment(user, active_profile, month, year, lesson_price, 'balance')
        
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def check_payment(call: CallbackQuery) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        payment_id = call.data.split('_')[2]
        month = int(call.data.split('_')[3])
        year = int(call.data.split('_')[4])
        
        payment = Payment.objects.get(yookassa_payment_id=payment_id)
        
        if payment.status == 'succeeded':
            # –ü–ª–∞—Ç–µ–∂ —É–∂–µ –ø—Ä–æ–≤–µ–¥–µ–Ω
            text = f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
            text += f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {payment.student_profile.profile_name}\n"
            text += f"üìö –ö–ª–∞—Å—Å: {payment.student_profile.class_number}\n"
            text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {payment.student_profile.get_education_level_display() or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {month:02d}.{year}\n"
            text += f"üíµ –°—É–º–º–∞: {payment.amount} ‚ÇΩ"
            
            markup = generate_payment_menu_keyboard()
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                text=text,
                reply_markup=markup,
                message_id=call.message.message_id
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω")
    except Payment.DoesNotExist:
        bot.answer_callback_query(call.id, "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def payment_history(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π"""
    from bot.handlers.registration import start_registration
    
    telegram_id = str(call.from_user.id)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user = User.objects.get(telegram_id=telegram_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å
        if not user.student_profiles.exists():
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            start_registration(call.message)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        active_profile = user.student_profiles.filter(is_active=True).first()
        if not active_profile:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        class_key = active_profile.class_number
        if active_profile.education_level:
            if active_profile.class_number in ['10', '11']:
                class_key = f"{active_profile.class_number}_{active_profile.education_level}"
        
        price_info = get_price_by_class(class_key)
        
        if not price_info:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞")
            return
            
        class_name = price_info['name']
        description = price_info['description']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
        payments = PaymentHistory.objects.filter(
            user=user,
            student_profile=active_profile,
            status='completed'
        ).order_by('-year', '-month')
        
        text = f"üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
        text += f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {active_profile.profile_name}\n"
        text += f"üìö –ö–ª–∞—Å—Å: {active_profile.class_number}\n"
        text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {active_profile.get_education_level_display() or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üí∞ –¢–∞—Ä–∏—Ñ: {class_name}\n"
        text += f"‚ÑπÔ∏è {description}\n"
        text += f"üí≥ –ë–∞–ª–∞–Ω—Å: {active_profile.balance} ‚ÇΩ\n\n"
        
        if not payments.exists():
            text += f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤."
        else:
            text += f"–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –º–µ—Å—è—Ü—ã:\n"
            for payment in payments:
                text += f"‚Ä¢ {payment.month:02d}.{payment.year} - {payment.amount_paid} ‚ÇΩ\n"
        
        markup = generate_payment_menu_keyboard()
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        start_registration(call.message)


def notify_payment_success(payment_id: str) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
    try:
        payment = Payment.objects.get(yookassa_payment_id=payment_id)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        PaymentHistory.objects.create(
            user=payment.user,
            student_profile=payment.student_profile,
            payment=payment,
            month=payment.payment_month,
            year=payment.payment_year,
            amount_paid=payment.amount,
            pricing_plan=payment.pricing_plan,
            payment_type='card',
            status='completed'
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞
        price_info = get_price_by_class(payment.student_profile.class_number)
        
        if price_info:
            class_name = price_info['name']
            description = price_info['description']
        else:
            class_name = payment.pricing_plan
            description = ""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        text = f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
        text += f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {payment.student_profile.profile_name}\n"
        text += f"üìö –ö–ª–∞—Å—Å: {payment.student_profile.class_number}\n"
        text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {payment.student_profile.get_education_level_display() or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üí∞ –¢–∞—Ä–∏—Ñ: {class_name}\n"
        text += f"‚ÑπÔ∏è {description}\n"
        text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {payment.payment_month:02d}.{payment.payment_year}\n"
        text += f"üíµ –°—É–º–º–∞: {payment.amount} ‚ÇΩ"
        
        bot.send_message(
            chat_id=payment.user.telegram_id,
            text=text
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        notify_admins_about_payment(
            payment.user,
            payment.student_profile,
            payment.payment_month,
            payment.payment_year,
            payment.amount,
            'card'
        )
        
    except Payment.DoesNotExist:
        pass


def notify_admins_about_payment(user: User, profile: 'StudentProfile', month: int, year: int, amount: float, payment_type: str) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ–ø–ª–∞—Ç–µ"""
    admins = User.objects.filter(is_admin=True)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞
    price_info = get_price_by_class(profile.class_number)
    
    if price_info:
        class_name = price_info['name']
        description = price_info['description']
    else:
        class_name = "–¢–∞—Ä–∏—Ñ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        description = ""
    
    text = f"üí∞ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!\n\n"
    text += f"üë§ –£—á–µ–Ω–∏–∫: {profile.full_name}\n"
    text += f"üìö –ö–ª–∞—Å—Å: {profile.class_number}\n"
    text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {profile.get_education_level_display() or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    text += f"üí∞ –¢–∞—Ä–∏—Ñ: {class_name}\n"
    text += f"‚ÑπÔ∏è {description}\n"
    text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {month:02d}.{year}\n"
    text += f"üí≥ –°–ø–æ—Å–æ–±: {'–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' if payment_type == 'card' else '–° –±–∞–ª–∞–Ω—Å–∞'}\n"
    text += f"üíµ –°—É–º–º–∞: {amount} ‚ÇΩ"
    
    for admin in admins:
        try:
            bot.send_message(admin.telegram_id, text)
        except Exception:
            continue